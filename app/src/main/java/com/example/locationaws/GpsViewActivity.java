package com.example.locationaws;

import android.Manifest;
import android.content.pm.PackageManager;
import android.location.GnssStatus;
import android.location.LocationManager;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

/**
 * üì° Classe GpsViewActivity
 *
 * Essa Activity √© respons√°vel por exibir visualmente os sat√©lites GNSS
 * (GPS, GLONASS, Galileo, etc.) em uma interface personalizada.
 *
 * A comunica√ß√£o √© feita entre:
 *  ‚Üí o LocationManager (que fornece o status GNSS do Android)
 *  ‚Üí a GNSSView (componente gr√°fico customizado que desenha os sat√©lites na tela)
 */
public class GpsViewActivity extends AppCompatActivity {

    // Gerenciador de localiza√ß√£o do sistema Android (controla o GPS)
    private LocationManager locationManager;

    // Componente customizado respons√°vel por desenhar os sat√©lites na tela
    private GNSSView gnssView;

    /**
     * üî≠ Callback que √© chamado automaticamente toda vez que o status dos sat√©lites muda.
     * O sistema Android envia as atualiza√ß√µes GNSS (como n√∫mero de sat√©lites, azimute e eleva√ß√£o)
     * e aqui repassamos essas informa√ß√µes para o componente gr√°fico GNSSView.
     */
    private final GnssStatus.Callback gnssCallback = new GnssStatus.Callback() {

        @Override
        public void onSatelliteStatusChanged(@NonNull GnssStatus status) {
            // Executa o c√≥digo na thread principal da interface (UI Thread)
            runOnUiThread(() -> {
                // Atualiza a GNSSView com o novo status de sat√©lites
                // (a GNSSView provavelmente chamar√° invalidate() para redesenhar)
                if (gnssView != null) {
                    gnssView.updateSatellites(status);
                }
            });
        }
    };

    /**
     * üß© M√©todo chamado quando a Activity √© criada (ciclo de vida do Android).
     * Aqui configuramos a interface e inicializamos o acesso ao GPS.
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Cria uma nova inst√¢ncia da view personalizada (GNSSView)
        gnssView = new GNSSView(this);

        // Define essa view como conte√∫do principal da Activity
        setContentView(gnssView);

        // Obt√©m o gerenciador de localiza√ß√£o (para acessar o GPS e GNSS)
        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);

        // ‚ö†Ô∏è Verifica se o app tem permiss√£o para acessar localiza√ß√£o precisa (GPS)
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {

            // Se n√£o tiver, solicita a permiss√£o em tempo de execu√ß√£o
            ActivityCompat.requestPermissions(
                    this,
                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
                    2001 // C√≥digo identificador da requisi√ß√£o
            );
            return; // Sai do m√©todo at√© o usu√°rio conceder a permiss√£o
        }

        // ‚úÖ Se a permiss√£o foi concedida, registra o callback do GNSS
        // Isso inicia o monitoramento dos sat√©lites (chamadas peri√≥dicas ao gnssCallback)
        locationManager.registerGnssStatusCallback(gnssCallback);
    }

    /**
     * üßπ M√©todo chamado automaticamente quando a Activity √© destru√≠da (fechada).
     * Aqui fazemos a limpeza de recursos e removemos os callbacks GNSS
     * para evitar vazamentos de mem√≥ria e uso desnecess√°rio de bateria.
     */
    @Override
    protected void onDestroy() {
        super.onDestroy();
        try {
            // Cancela o recebimento de atualiza√ß√µes GNSS
            locationManager.unregisterGnssStatusCallback(gnssCallback);
        } catch (Exception ignored) {
            // Ignora erros se o callback j√° tiver sido removido
        }
    }
}
